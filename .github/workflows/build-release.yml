name: Build and Release

on:
  push:
    branches:
      - main
    paths:
      - 'src/_version.py'
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
          - os: macos-latest
            platform: macos
          - os: windows-2022
            platform: windows

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=$(grep '__version__' src/_version.py | sed 's/.*= "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Install project dependencies
      run: pip install -r requirements.txt

    - name: Build executable
      run: |
        pyinstaller --onedir src/main.py --name mgit

    - name: Install 7zip (Windows)
      if: matrix.os == 'windows-2022'
      run: choco install 7zip.install
      shell: powershell

    - name: Create ZIP
      shell: bash
      run: |
        VERSION=${{ steps.version.outputs.version }}
        if [ "${{ matrix.platform }}" == "linux" ]; then
          cd dist && zip -r mgit-linux-$VERSION.zip mgit/
        elif [ "${{ matrix.platform }}" == "macos" ]; then
          cd dist && zip -r mgit-mac-$VERSION.zip mgit/
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          cd dist && 7z a -tzip mgit-win-$VERSION.zip mgit/
        fi

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.platform }}-zip
        path: |
          dist/mgit-${{ matrix.platform }}-${{ steps.version.outputs.version }}.zip

  build-source:
    name: Build Source ZIP
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=$(grep '__version__' src/_version.py | sed 's/.*= "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Create source ZIP
      run: |
        VERSION=${{ steps.version.outputs.version }}
        zip -r mgit-src-$VERSION.zip . -x ".git/*" ".github/*" "dist/*" "build/*" "*.pyc" "__pycache__/*" ".pytest_cache/*" ".ruff_cache/*" ".mypy_cache/*"

    - name: Upload source artifact
      uses: actions/upload-artifact@v4
      with:
        name: source-zip
        path: mgit-src-${{ steps.version.outputs.version }}.zip

  release:
    name: Create Release
    needs: [build, build-source]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        VERSION=$(grep '__version__' src/_version.py | sed 's/.*= "\(.*\)"/\1/')
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## Downloads

          - **Linux**: `mgit-linux-${{ steps.version.outputs.version }}.zip`
          - **macOS**: `mgit-mac-${{ steps.version.outputs.version }}.zip`
          - **Windows**: `mgit-win-${{ steps.version.outputs.version }}.zip`
          - **Source**: `mgit-src-${{ steps.version.outputs.version }}.zip`
        files: |
          ./artifacts/linux-zip/mgit-linux-${{ steps.version.outputs.version }}.zip
          ./artifacts/macos-zip/mgit-mac-${{ steps.version.outputs.version }}.zip
          ./artifacts/windows-zip/mgit-win-${{ steps.version.outputs.version }}.zip
          ./artifacts/source-zip/mgit-src-${{ steps.version.outputs.version }}.zip

