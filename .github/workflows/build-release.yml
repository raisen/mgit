name: Build and Release

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major

permissions:
  contents: write
  packages: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get current version
      id: current_version
      run: |
        if [ -f "src/version.py" ]; then
          VERSION=$(grep '__version__' src/version.py | sed 's/.*= "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        elif [ -f "pyproject.toml" ]; then
          VERSION=$(grep '^version =' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT
        else
          echo "version=1.0.0" >> $GITHUB_OUTPUT
        fi

    - name: Calculate new version
      id: version
      run: |
        CURRENT_VERSION="${{ steps.current_version.outputs.version }}"
        BUMP_TYPE="${{ github.event.inputs.version_bump || 'patch' }}"

        # Parse version
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"

        case $BUMP_TYPE in
          major)
            NEW_VERSION="$((MAJOR + 1)).0.0"
            ;;
          minor)
            NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
            ;;
          patch)
            NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
            ;;
          *)
            NEW_VERSION="$CURRENT_VERSION"
            ;;
        esac

        # Add timestamp to make unique tags
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        UNIQUE_VERSION="$NEW_VERSION-$TIMESTAMP"
        
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$UNIQUE_VERSION" >> $GITHUB_OUTPUT

    - name: Update version in files
      run: |
        NEW_VERSION="${{ steps.version.outputs.version }}"
        TAG="${{ steps.version.outputs.tag }}"

        # Update version.py
        if [ -f "src/version.py" ]; then
          sed -i "s/__version__ = \".*\"/__version__ = \"$NEW_VERSION\"/" src/version.py
        fi

        # Update pyproject.toml
        if [ -f "pyproject.toml" ]; then
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml
        fi

    - name: Create tag
      run: |
        TAG="${{ steps.version.outputs.tag }}"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git commit -m "Bump version to $TAG" || true
        # Delete existing tag if it exists
        git tag -d "$TAG" || true
        git push origin :"$TAG" || true
        # Create new tag
        git tag "$TAG"
        git push origin "$TAG"

  build:
    name: Build for ${{ matrix.os }}
    needs: prepare-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            executable_name: mgit
          - os: macos-latest
            platform: macos
            executable_name: mgit
          - os: windows-2022
            platform: windows
            executable_name: mgit.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: ${{ needs.prepare-release.outputs.tag }}

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Install project dependencies
      run: |
        pip install ruff pyright

    - name: Run code quality checks
      run: |
        make check
      continue-on-error: true

    - name: Build executable
      run: |
        make build

    - name: Install 7zip (Windows)
      if: matrix.os == 'windows-latest'
      run: choco install 7zip.install
      shell: powershell

    - name: Rename executable for platform
      shell: bash
      run: |
        if [ "${{ matrix.platform }}" == "linux" ]; then
          mv dist/mgit dist/mgit-linux
          cd dist && zip -r mgit-linux.zip mgit-linux/
        elif [ "${{ matrix.platform }}" == "macos" ]; then
          mv dist/mgit dist/mgit-macos
          cd dist && zip -r mgit-macos.zip mgit-macos/
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          mv dist/mgit dist/mgit-windows
          cd dist && 7z a -tzip mgit-windows.zip mgit-windows/
        fi

    - name: Remove macOS quarantine attribute
      if: matrix.os == 'macos-latest'
      run: |
        xattr -d com.apple.quarantine dist/mgit-macos || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mgit-${{ matrix.platform }}
        path: |
          dist/mgit-${{ matrix.platform }}.zip
        retention-days: 30

  release:
    name: Create Release
    needs: [prepare-release, build]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      env:
        NODE_OPTIONS: --no-deprecation
      with:
        path: artifacts

    - name: Unzip artifacts
      run: |
        cd artifacts
        for dir in mgit-*; do
          if [ -d "$dir" ]; then
            cd "$dir"
            unzip *.zip
            cd ..
          fi
        done

    - name: List artifacts
      run: find artifacts -type f

    - name: Check file existence
      run: |
        ls -la ./artifacts/mgit-linux/mgit-linux/mgit || echo "Linux file missing"
        ls -la ./artifacts/mgit-macos/mgit-macos/mgit || echo "macOS file missing"
        ls -la ./setup-macos.sh || echo "Setup script missing"
        ls -la ./artifacts/mgit-windows/mgit-windows/mgit.exe || echo "Windows file missing"

    - name: Create release
      uses: softprops/action-gh-release@v2
      env:
        NODE_OPTIONS: --no-deprecation
      with:
        tag_name: ${{ needs.prepare-release.outputs.tag }}
        name: Release ${{ needs.prepare-release.outputs.version }}
        body: |
          ## Changes

          See the [changelog](https://github.com/${{ github.repository }}/blob/main/README.md#changelog) for details.

          ## Downloads

          This release includes pre-built executables for multiple platforms as ZIP files:

          - **Linux**: `mgit-linux.zip` (contains `mgit-linux/mgit`)
          - **macOS**: `mgit-macos.zip` (contains `mgit-macos/mgit`) + `setup-macos.sh` (setup script)
          - **Windows**: `mgit-windows.zip` (contains `mgit-windows/mgit.exe`)

          ## Installation

          1. Download the ZIP file for your platform.
          2. Unzip the file (this creates a directory with the executable and dependencies).
          3. Make it executable (Linux/macOS): `chmod +x mgit*/mgit*`
          4. Move to a directory in your PATH or run directly: `./mgit*/mgit* --help`

          **macOS Security Note**: If you get a security warning ("Apple could not verify..."), right-click the executable and select "Open", or run in Terminal: `xattr -d com.apple.quarantine /path/to/mgit-macos/mgit`

          **Note**: The ZIP contains a directory with the executable and its dependencies. You can run it directly from the directory or move the entire directory to your PATH.

          ## Usage

          ```bash
          ./mgit-linux/mgit --help    # Linux
          ./mgit-macos/mgit --help    # macOS
          ./mgit-windows/mgit.exe --help  # Windows
          ```

          **Directory Structure Note**: After unzipping, you'll have a directory (e.g., `mgit-macos`) with the executable inside. Run the executable from within that directory.
        draft: false
        prerelease: false
        overwrite_files: false
        files: |
          ./artifacts/mgit-linux/mgit-linux/mgit
          ./artifacts/mgit-macos/mgit-macos/mgit
          ./setup-macos.sh
          ./artifacts/mgit-windows/mgit-windows/mgit.exe

