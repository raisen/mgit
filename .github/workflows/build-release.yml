name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name for manual release'
        required: true
        default: 'v1.0.0'

jobs:
  build:
    name: Build for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            executable_name: mgit
          - os: macos-latest
            platform: macos
            executable_name: mgit
          - os: windows-latest
            platform: windows
            executable_name: mgit.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller

    - name: Install project dependencies
      run: |
        pip install ruff mypy

    - name: Run code quality checks
      run: |
        make check
      continue-on-error: true

    - name: Build executable
      run: |
        make build

    - name: Rename executable for platform
      run: |
        if [ "${{ matrix.platform }}" == "linux" ]; then
          mv dist/mgit dist/mgit-linux
        elif [ "${{ matrix.platform }}" == "macos" ]; then
          mv dist/mgit dist/mgit-macos
        elif [ "${{ matrix.platform }}" == "windows" ]; then
          mv dist/mgit.exe dist/mgit-windows.exe
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: mgit-${{ matrix.platform }}
        path: |
          dist/mgit*
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get tag name
      id: tag_name
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        else
          echo "tag=${{ github.event.inputs.tag_name }}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag_name.outputs.tag }}
        release_name: Release ${{ steps.tag_name.outputs.tag }}
        body: |
          ## Changes

          See the [changelog](https://github.com/${{ github.repository }}/blob/main/README.md#changelog) for details.

          ## Downloads

          This release includes pre-built executables for multiple platforms:

          - **Linux**: `mgit-linux`
          - **macOS**: `mgit-macos`
          - **Windows**: `mgit-windows.exe`

          ## Installation

          1. Download the executable for your platform
          2. Make it executable (Linux/macOS): `chmod +x mgit-*`
          3. Move to a directory in your PATH or run directly

          ## Usage

          ```bash
          ./mgit --help
          ./mgit status
          ```
        draft: false
        prerelease: false

    - name: Upload Linux executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mgit-linux/mgit-linux
        asset_name: mgit-linux
        asset_content_type: application/octet-stream

    - name: Upload macOS executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mgit-macos/mgit-macos
        asset_name: mgit-macos
        asset_content_type: application/octet-stream

    - name: Upload Windows executable
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts/mgit-windows/mgit-windows.exe
        asset_name: mgit-windows.exe
        asset_content_type: application/octet-stream

  # Optional: Test the built executables
  test-release:
    name: Test Release Assets
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')

    steps:
    - name: Download Linux artifact
      uses: actions/download-artifact@v4
      with:
        name: mgit-linux
        path: test-linux

    - name: Test Linux executable
      run: |
        chmod +x test-linux/mgit-linux
        ./test-linux/mgit-linux --help